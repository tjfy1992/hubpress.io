<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[tjfy1992's blog]]></title><description><![CDATA[tjfy1992's blog]]></description><link>https://tjfy1992.github.io</link><generator>RSS for Node</generator><lastBuildDate>Sat, 03 Jun 2017 09:03:16 GMT</lastBuildDate><atom:link href="https://tjfy1992.github.io/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title><![CDATA[Vue2.0+ElementUI+PageHelper实现的表格分页]]></title><description><![CDATA[<div class="sect2">
<h3 id="__">前言</h3>
<div class="paragraph">
<p>最近做了一些前端的项目，要对表格进行一些分页显示。表格分页的方法有很多，从宏观上来说分为物理分页和逻辑分页，由于逻辑分页（即前端分页）的做法是将数据全部缓存，然后分页显示，这样在数据量较大的时候会对浏览器的速度产生影响，所以考虑之后我使用了后端分页，后端分页的特点是对当前页的数据进行请求，每次当页码变化或者每页数据量变化的时候，就重新发一次请求。这里所用到的技术主要有以下几种：</p>
</div>
<div class="ulist">
<ul>
<li>
<p><strong>Spring</strong></p>
</li>
<li>
<p><strong>SpringMVC</strong></p>
</li>
<li>
<p><strong>Mybatis</strong></p>
</li>
<li>
<p><strong>VueJS 2.0</strong></p>
</li>
<li>
<p><strong>ElementUI</strong></p>
</li>
</ul>
</div>
<div class="paragraph">
<p>后端数据库用的是Mysql，其实使用其他的数据库也可以，因为PageHelper插件里有对于各个数据库的兼容。PageHelper的本质是插入一个Interceptor，在mybatis的sql语句执行之前进行分页处理，本质上是加了两个limit的参数。对于PageHelper的配置和用法，请参考joker_zhou写的
[<a href="http://blog.csdn.net/joker_zhou/article/details/50418005">Spring + Mybatis 使用 PageHelper 插件分页</a>]这篇文章，这里不再赘述。</p>
</div>
<div class="paragraph">
<p>前端所使用的是最近很火的vuejs框架2.0，这是一个mvvm架构的框架，类似于AngularJS，但是更加轻量。UI框架使用的是由饿了么团队推出的elementUI框架，这是一款基于vuejs的框架，正好和我们的前端框架完美结合，并且封装了很多组件，开发起来很方便。
下面就是这个Demo的截图，实现了基本的增删改查功能，表格排序是elementUI的表格控件里自带的一个属性，可以很方便的设置。</p>
</div>
</div>
<div class="sect2">
<h3 id="___2">正文</h3>
<div class="paragraph">
<p>下面是程序的截图，右键在新标签页中打开图片可以看得清楚些。</p>
</div>
<div class="imageblock">
<div class="content">
<img src="http://img.blog.csdn.net/20170419115058079?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjkwNzA0OQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="SouthEast">
</div>
</div>
<div class="paragraph">
<p>下面来看一下前端的代码，首先是引入的文件：</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code>	&lt;link rel="stylesheet" href="/core/element-ui/lib/theme-default/index.css"&gt;
	&lt;script src="./js/jquery-3.1.1.min.js"&gt;&lt;/script&gt;
	&lt;script src="./js/json2.js"&gt;&lt;/script&gt;
	&lt;script src="./js/vue.min.js"&gt;&lt;/script&gt;
	&lt;script src="./js/vue-resource.js"&gt;&lt;/script&gt;
	&lt;script src="./element-ui/lib/index.js"&gt;&lt;/script&gt;</code></pre>
</div>
</div>
<div class="paragraph">
<p>其中第一行和最后一行是ElementUI的导入包，可以从[<a href="http://element.eleme.io/#/zh-CN/component/installation">ElementUI官网</a>]下载到源文件引入，也可以直接使用CDN的方式来引入：</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code>&lt;!-- 引入样式 --&gt;
&lt;link rel="stylesheet" href="https://unpkg.com/element-ui/lib/theme-default/index.css"&gt;
&lt;!-- 引入组件库 --&gt;
&lt;script src="https://unpkg.com/element-ui/lib/index.js"&gt;&lt;/script&gt;</code></pre>
</div>
</div>
<div class="paragraph">
<p>倒数第二行vue-resource是vuejs的一个ajax插件，可以通过XMLHttpRequest或JSONP发起请求并处理响应。简单的说，就是可以用来发送ajax请求。</p>
</div>
<div class="paragraph">
<p>接下来是style样式</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code>	&lt;style&gt;
              .el-select .el-input {
                width: 110px;
              }

              .el-table .info-row {
                    background: #c9e5f5;
              }

              #top {
                  background:#20A0FF;
                  padding:5px;
                  overflow:hidden
              }
	&lt;/style&gt;</code></pre>
</div>
</div>
<div class="paragraph">
<p>HTML body代码</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code>  &lt;div id="test"&gt;

        &lt;div id="top"&gt;
          &lt;span style="float:right;"&gt;
              &lt;el-button type="text" @click="add" style="color:white"&gt;添加&lt;/el-button&gt;
              &lt;el-button type="text" @click="deletenames" style="color:white"&gt;批量删除&lt;/el-button&gt;
          &lt;/span&gt;
        &lt;/div&gt;


	&lt;br/&gt;

        &lt;div style="margin-top:15px"&gt;
             &lt;el-input placeholder="请输入内容" v-model="criteria" style="padding-bottom:10px;"&gt;
                &lt;el-select v-model="select" slot="prepend" placeholder="请选择"&gt;
                   &lt;el-option label="id" value="1"&gt;&lt;/el-option&gt;
                   &lt;el-option label="name" value="2"&gt;&lt;/el-option&gt;
                &lt;/el-select&gt;
                &lt;el-button slot="append" icon="search" v-on:click="search"&gt;&lt;/el-button&gt;
            &lt;/el-input&gt;

            &lt;el-table
              ref="testTable"
              :data="tableData"
              style="width:100%"
              border
              :default-sort = "{prop: 'id', order: 'ascending'}"
              @selection-change="handleSelectionChange"
              @row-click="handleclick"
              :row-class-name = "tableRowClassName"
              &gt;
              &lt;el-table-column
                type="selection"
                &gt;
              &lt;/el-table-column&gt;
              &lt;el-table-column
                prop="id"
                label="Id"
                sortable
                show-overflow-tooltip&gt;
              &lt;/el-table-column&gt;
              &lt;el-table-column
                prop="name"
                label="姓名"
                sortable&gt;
              &lt;/el-table-column&gt;
              &lt;el-table-column label="操作"&gt;
                &lt;template scope="scope"&gt;
                  &lt;el-button
                    size="small"
                    type="primary"
                    @click="handleEdit(scope.$index, scope.row)"&gt;编辑&lt;/el-button&gt;
                  &lt;el-button
                    size="small"
                    type="danger"
                    @click="handleDelete(scope.$index, scope.row)"&gt;删除&lt;/el-button&gt;
                &lt;/template&gt;
              &lt;/el-table-column&gt;
            &lt;/el-table&gt;

            &lt;div align="center"&gt;
                &lt;el-pagination
                    @size-change="handleSizeChange"
                    @current-change="handleCurrentChange"
                    :current-page="currentPage"
                    :page-sizes="[10, 20, 30, 40]"
                    :page-size="pagesize"
                    layout="total, sizes, prev, pager, next, jumper"
                    :total="totalCount"&gt;
                &lt;/el-pagination&gt;
            &lt;/div&gt;
      	&lt;/div&gt;
    &lt;/div&gt;

    &lt;footer align="center"&gt;
        &lt;p&gt;&amp;copy; Vue.js 2.0 + ElementUI分页Demo&lt;/p&gt;
    &lt;/footer&gt;</code></pre>
</div>
</div>
<div class="paragraph">
<p>接下来是比较重要的创建vue实例。这里使用ES5的写法。</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code>  &lt;script&gt;
    var vue = new Vue({
            el:"#test",
            data: {
                //表格当前页数据
                tableData: [],

                //多选数组
                multipleSelection: [],

                //请求的URL
                url:'newstu/querystudentbypage',

                //搜索条件
                criteria: '',

                //下拉菜单选项
                select: '',

                //默认每页数据量
                pagesize: 10,

                //默认高亮行数据id
                highlightId: -1,

                //当前页码
                currentPage: 1,

                //查询的页码
                start: 1,

                //默认数据总数
                totalCount: 1000,
            },

          methods: {

              //从服务器读取数据
              loadData: function(criteria, pageNum, pageSize){
                this.$http.get(this.url,{parameter:criteria, pageNum:pageNum, pageSize:pageSize}).then(function(res){
                        this.tableData = res.data.pagestudentdata;
                        this.totalCount = res.data.number;
                    },function(){
                        console.log('failed');
                    });
              },

              //多选响应
              handleSelectionChange: function(val) {
                  this.multipleSelection = val;
              },

              //点击行响应
              handleclick: function(row, event, column){
                  this.highlightId = row.id;
              },

              //编辑
              handleEdit: function(index, row) {
                  this.$prompt('请输入新名称', '提示', {
                        confirmButtonText: '确定',
                        cancelButtonText: '取消',
                      }).then(({ value }) =&gt; {
                          if(value==''||value==null)
                              return;
                          this.$http.post('newstu/update',{"id":row.id,"name":value},{emulateJSON: true}).then(function(res){
                              this.loadData(this.criteria, this.currentPage, this.pagesize);
                          },function(){
                              console.log('failed');
                          });
                      }).catch(() =&gt; {

                  });
              },


              //单行删除
              handleDelete: function(index, row) {
                  var array = [];
                  array.push(row.id);
                  this.$http.post('newstu/delete',{"array":array},{emulateJSON: true}).then(function(res){
                      this.loadData(this.criteria, this.currentPage, this.pagesize);
                  },function(){
                      console.log('failed');
                  });
              },

              //搜索
              search: function(){
                  this.loadData(this.criteria, this.currentPage, this.pagesize);
              },

              //添加
              add: function(){
                      this.$prompt('请输入名称', '提示', {
                        confirmButtonText: '确定',
                        cancelButtonText: '取消',
                      }).then(({ value }) =&gt; {
                          if(value==''||value==null)
                              return;
                          this.$http.post('newstu/add',{"name":value},{emulateJSON: true}).then(function(res){
                              this.loadData(this.criteria, this.currentPage, this.pagesize);
                          },function(){
                              console.log('failed');
                          });
                      }).catch(() =&gt; {

                  });

              },

              //多项删除
              deletenames: function(){
                  if(this.multipleSelection.length==0)
                      return;
                  var array = [];
                  this.multipleSelection.forEach((item) =&gt; {
                      array.push(item.id);
                  })
                  this.$http.post('newstu/delete',{"array":array},{emulateJSON: true}).then(function(res){
                      this.loadData(this.criteria, this.currentPage, this.pagesize);
                  },function(){
                      console.log('failed');
                  });
              },

              //改变当前点击的行的class，高亮当前行
              tableRowClassName: function(row, index){
                 if(row.id == this.highlightId)
                 {
                    return 'info-row';
                 }
              },

              //每页显示数据量变更
              handleSizeChange: function(val) {
                  this.pagesize = val;
                  this.loadData(this.criteria, this.currentPage, this.pagesize);
              },

              //页码变更
              handleCurrentChange: function(val) {
                  this.currentPage = val;
                  this.loadData(this.criteria, this.currentPage, this.pagesize);
              },

          },


        });

          //载入数据
          vue.loadData(vue.criteria, vue.currentPage, vue.pagesize);
  &lt;/script&gt;</code></pre>
</div>
</div>
<div class="paragraph">
<p>现在对上述代码进行一个简单的解释，tableData是表格当前页所显示的数据的数组，当网页加载出来后，首先执行loadData方法，criteria是当前的搜索条件，默认为空，第二个参数是当前页码，默认为第一页，第三个参数为偏移量，即想查询的数量，也就是当前每页所含有的数据量。当页码或每页数据量改变时都会以这些参数的新值作为参数重新调用这个方法。我们可以看一下Controller的代码：</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">	@ResponseBody
	@RequestMapping(value = "/querystudentbypage", method = RequestMethod.GET)
    public Map&lt;String, Object&gt; querystudentbypage(@RequestParam(value="parameter")String parameter,
    		@RequestParam(value="pageNum")int pageNum, @RequestParam(value="pageSize")int pageSize)
	{
		Page&lt;Student&gt; page = iNewStudentService.selectStudents(parameter, pageNum, pageSize);
		Map&lt;String, Object&gt; map = new HashMap&lt;String, Object&gt;();
		map.put("pagestudentdata", page);
		map.put("number", page.getTotal());
		return map;
    }</code></pre>
</div>
</div>
<div class="paragraph">
<p>还有service的实现代码：</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">	public Page&lt;Student&gt; selectStudents(String parameter, int pageNum, int pageSize)
	{
		Page&lt;Student&gt; page = PageHelper.startPage(pageNum, pageSize);
		newstudentMapper.selectStudents(parameter);
		return page;
	}</code></pre>
</div>
</div>
<div class="paragraph">
<p>mybatis的代码</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code>    &lt;select id="selectStudents" resultMap="NewStudentResultMap"&gt;
    	select id,name from student where id=#{parameter} or name like CONCAT('%',#{parameter},'%')
    &lt;/select&gt;</code></pre>
</div>
</div>
<div class="paragraph">
<p>注：为了代码的简便，这里对用户的输入进行了模糊处理，数据表中的id字段等于用户的输入或name字段包含了用户的输入都可以被查询出来。</p>
</div>
<div class="paragraph">
<p>从上面的service实现类和mabatis的代码中可以看出，<strong>我们并没有手动去给sql语句加limit，而是在newstudentMapper.selectStudents(parameter);这句代码之前加入了Page&lt;Student&gt; page = PageHelper.startPage(pageNum, pageSize);这句代码就是对PageHelper的调用，不需要去管PageHelper如何去实现（实际是通过Interceptor），只需要这一句代码就可以做出物理分页。它会对紧跟在它后面的一个sql查询起作用，并且返回分页后的当页代码。</strong>
Controller中的map我们可以看到put了两个值，一个是返回的List，另一个是数据总量。前端的表格控件会用到这个LIst，而分页控件会用到这个数据总量。<strong>注意startPage的参数，第一个是想要请求的页码，第二个是请求页的数据量。这两个要与前端请求时发送的参数相对应。</strong></p>
</div>
<div class="paragraph">
<p>程序的其他基本功能包括添加、修改、删除、批量删除等，前端的代码都做了解释，后端也只是单纯的调数据库而已，这里就不再贴上后端的代码。</p>
</div>
<div class="paragraph">
<p>注：
表格行点击高亮功能在ElementUI的表格控件中通过添加highlight-current-row属性可以设置，不过高亮的颜色被封装到了css文件里。我这里没有用到这个属性，而是自定义了一个class的style，当点击某行时把自定义的style赋给当前行。如果对ElementUI本身的高亮颜色不满意又不想去改css文件的话，可以像文中这种方式自定义一个行点击响应。</p>
</div>
</div>
<div class="sect2">
<h3 id="___3">写在最后的话</h3>
<div class="paragraph">
<p>vuejs作为一个前端控件，在最近几年越来越受欢迎，它的社区很活跃，同时又有大量的开源项目库与之配套，详细列表请参考[<a href="http://mp.weixin.qq.com/s?__biz=MzAxODE2MjM1MA==&amp;mid=2651551975&amp;idx=1&amp;sn=7eb0e564b8c451b9662e174913de303f&amp;chksm=8025af26b75226300164df811736abe65dac6cb3597cea86a809c2352d2459a16068d4e00b13&amp;mpshare=1&amp;scene=1&amp;srcid=0414nRm1dVPE7iutDEJt0SDJ#rd">Vue 开源项目库汇总</a>]。如果将vuejs与开源库整合使用，将大大提升前端开发效率，尤其是对于像我这样对前端并不是很熟悉的后端工程师，也是可以对照着官网上面的教程和例子进行前端开发。如果使用ES6的写法，那么模块化会更加轻松。</p>
</div>
<div class="paragraph">
<p>ElementUI也是一套很不错的组件库，对于我们经常用到的表格、表单、时间日期选择器等常用组件都有着很好的封装和接口。</p>
</div>
<div class="paragraph">
<p>PageHelper作为一个国人写的mybatis分页插件，有着相当不错的表现，并且支持当前所有的主流数据库，使用起来也很方便。</p>
</div>
<div class="paragraph">
<p>前端开发所需要学习的东西并不比后端开发少多少，而且更需要一个经验的积累，在此记录一下学习前端开发的历程。</p>
</div>
</div>]]></description><link>https://tjfy1992.github.io/2017/06/03/Vue20-ElementUI-Pge-Helper.html</link><guid isPermaLink="true">https://tjfy1992.github.io/2017/06/03/Vue20-ElementUI-Pge-Helper.html</guid><pubDate>Sat, 03 Jun 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[Javascript用递归的方式遍历json数组]]></title><description><![CDATA[<div class="sect1">
<h2 id="__">前言</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Javscript语言有很多值得探究和注意的地方，下面我们来看一下用递归的方式遍历JSON对象数组。</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="___2">正文</h2>
<div class="sectionbody">
<div class="paragraph">
<p>假设我们的要遍历的数组是这样的：</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-javascript" data-lang="javascript">var array = [
          {
              id: 1,
              children:[{
                      id:2,
                      children:[]
                  }]
          },

          {
              id:3,
              children:[]
          },

          {
              id:4,
              children:[
                  {
                      id:5,
                      children:[
                          {
                              id:6,
                              children:[]
                          },

                          {
                              id:7,
                              children:[]
                          }
                      ]
                  }
              ]
          }
	];</code></pre>
</div>
</div>
<div class="paragraph">
<p>这是一个数组,假如我们想找出id为7的对象，可以用如下的函数：</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-javascript" data-lang="javascript">		var find = function(arr, id){
			arr.forEach((item) =&gt; {
	    		 if(item.id==id)
	    		 {
	    			 return item;
	    		 }
	    		 else if(item.children.length &gt; 0)
	    		 {
	    			 find(item.children, id);
	    		 }
	  	    })
		}
		var item = find(array, 7);
		console.log(item);</code></pre>
</div>
</div>
<div class="paragraph">
<p>看起来没什么问题，只是简单的递归，但是最后得到的输出却是undefined。这是因为函数里的return语句，所返回的其实是arr.forEach这个匿名函数的返回值，而我们所调用的find函数实际上却没有返回值，所以当我们输出item的时候会得到undefined。这里的解决方法是，在函数外面定义一个变量，然后在函数语句中return之前，把找到的对象赋给这个变量：</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-javascript" data-lang="javascript">	    var returnedItem;

		var find = function(arr, id){
			arr.forEach((item) =&gt; {
	    		 if(item.id==id)
	    		 {
	    			 returnedItem = item;
	    			 return item;
	    		 }
	    		 else if(item.children.length &gt; 0)
	    		 {
	    			 find(item.children, id);
	    		 }
	  	    })
		}

		var item = find(array, 7);
		console.log(returnedItem);</code></pre>
</div>
</div>
<div class="paragraph">
<p>修改后的输出为</p>
</div>
<div class="imageblock">
<div class="content">
<img src="http://img.blog.csdn.net/20170510162709027?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjkwNzA0OQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="SouthEast">
</div>
</div>
<div class="paragraph">
<p>这样一切就正常了。</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="___3">结尾</h2>
<div class="sectionbody">
<div class="paragraph">
<p>出现这样的情况主要还是因为javascript对于return这个关键字的处理和java语言稍有不同。在上面的修改后的代码中，其实完全省略掉return语句，因为每个对象的id是唯一的，returnedItem在被赋值以后也不会再变化。这里的return只是起到了一个跳出循环的作用，在遍历量很大的时候可以保留下来，这样在我们遍历到想要的item之后可以让程序省去遍历剩余数组的步骤，提高效率。</p>
</div>
</div>
</div>]]></description><link>https://tjfy1992.github.io/2017/06/03/Javascriptjson.html</link><guid isPermaLink="true">https://tjfy1992.github.io/2017/06/03/Javascriptjson.html</guid><pubDate>Sat, 03 Jun 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[Build your own Vuejs 2.0 Website]]></title><description><![CDATA[<div class="sect1">
<h2 id="_before_started">Before Started</h2>
<div class="sectionbody">
<div class="paragraph">
<p>With Vue became more and more popular as a javascript framework in the recent years, a large amount of companies have chosen it as a main part of their website development plan. As a lightweight framework, Vue is easy to learn and use, which makes it simpler than ever to build a website. In addition, many UI libraries based on VUE are open-source and available with detailed documents. The one that we introduce today would be ElementUI, which is one of the open-source UI libraries presented by ELE.ME, a food ordering and delivery O2O platform. Here are the official websites for VUE and ElementUI: <a href="https://vuejs.org/">Vuejs</a> and <a href="http://element.eleme.io/#/en-US/component/installation/">ElementUI</a>.</p>
</div>
<div class="paragraph">
<p>Here are something that we need to build a website:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>NodeJS(npm)</p>
</li>
<li>
<p>Webstorm (IDE for Vue)</p>
</li>
<li>
<p>Nginx(proxy server)</p>
</li>
<li>
<p>Eclipse(IDE for java)</p>
</li>
<li>
<p>Windows 10(or whatever OS you prefer for development)</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_text">Text</h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="_installation_of_nodejs_and_npm">Installation of nodeJS and npm</h3>
<div class="paragraph">
<p>As we need to use tha package manager 'npm', we need to install nodeJS. In fact, npm is a module of nodeJS, and has already been integrated into the nodeJS installer. We can visit <a href="https://nodejs.org/en/">Offcial Site of NodeJS</a> and download the newest version for our OS. Here I download teh zip file for win64, and unzip it after downloading, and then we can see a node.exe in the directory.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="http://img.blog.csdn.net/20170526105340587?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjkwNzA0OQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="SouthEast">
</div>
</div>
<div class="paragraph">
<p>One more step for Windows user to do is to add the current directory&#8217;s path into the 'Path' of System Environment Variables. And then we open the 'cmd', and input npm -v. If you see the output like below, then nodeJS is succesfully installed and configured in your computer.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="http://img.blog.csdn.net/20170526105220442?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjkwNzA0OQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="SouthEast">
</div>
</div>
<div class="paragraph">
<p>And from now on we could use npm in any directory and path.</p>
</div>
</div>
<div class="sect2">
<h3 id="_install_webstorm">Install Webstorm</h3>
<div class="paragraph">
<p>Webstorm is an excellent IDE for Front-end development. In the newest version of Webstorm Vue is supported by default and syntax highlighting. We can visit <a href="http://www.jetbrains.com/webstorm/">Webstorm&#8217;s offical web</a> to download the IDE.</p>
</div>
<div class="paragraph">
<p>After we enter Webstorm, there is one more thing we need to do before starting to write code. We need to add the template of VUE to the template library so that we don&#8217;t need to write some default code every time when we create a vue component. At the lefttop of the IDE, we click FILE&#8594;New&#8594;Edit File Templates, and click the green 'plus' icon on the rightop, and input the Name and Extension for the template:</p>
</div>
<div class="imageblock">
<div class="content">
<img src="http://img.blog.csdn.net/20170526110813307?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjkwNzA0OQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="SouthEast">
</div>
</div>
<div class="paragraph">
<p>And then add the following code into the code area below</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code>&lt;template&gt;
    &lt;div&gt;
    &lt;/div&gt;
&lt;/template&gt;
&lt;script type="text/ecmascript-6"&gt;
    export default {
        data(){
            return {

            }
        }
    }
&lt;/script&gt;</code></pre>
</div>
</div>
<div class="paragraph">
<p>Then click apply, and click ok. Now we click the File&#8594;New on the lefttop again, and we can see the Vue Component that we created just now. We choose it, and input 'test' for its name, then we can see the code in the new file, just as we wrote before.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="http://img.blog.csdn.net/20170526111206187?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjkwNzA0OQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="SouthEast">
</div>
</div>
<div class="paragraph">
<p>You may notice that the component is written with Javascript ES6, but the IDE supports ES5 by default. So we need to click File&#8594;Settings, and change the settings like following:</p>
</div>
<div class="imageblock">
<div class="content">
<img src="http://img.blog.csdn.net/20170526111848071?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjkwNzA0OQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="SouthEast">
</div>
</div>
<div class="paragraph">
<p>Then click apply, and click OK.</p>
</div>
</div>
<div class="sect2">
<h3 id="_create_a_project_of_elementui">Create a project of ElementUI</h3>
<div class="paragraph">
<p>ES5 is still the majority these days, and not all the browser support ES6. We need babel to translate the ES6 back into ES5, and package the files using webpack. Sounds complicated, right? Don&#8217;t worry, we don&#8217;t need to configure these tools by ourself. If we are buliding an ordinary vue project, we could use vue-cli which automatically generates what we need for us. But right now we are creating an ElementUI project based on Vue, things become really simple. There is a general project template at <a href="https://github.com/ElementUI/element-starter">ElementUI team&#8217;s Github</a>. We download the template, unzip it, done.
The stucture of the project is like following:</p>
</div>
<div class="imageblock">
<div class="content">
<img src="http://img.blog.csdn.net/20170526112758965?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjkwNzA0OQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="SouthEast">
</div>
</div>
<div class="paragraph">
<p>All the tools are already in it. Now we install npm modules into the directory. In the 'cmd', we enter the current directory, and input</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code>npm install</code></pre>
</div>
</div>
<div class="paragraph">
<p>After the installation we can see that there is a new directory called node_modules in our project. That is where the dependency packages are. If we want to add a new dependency in the future, we run the code above again followed by the package that we want to install, followed by --save. For example, if we want to add vue-router, then input</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code>npm install vue-router --save</code></pre>
</div>
</div>
<div class="paragraph">
<p>npm will automatically find the newest version of the package and install it.</p>
</div>
</div>
<div class="sect2">
<h3 id="_make_it_run">Make it run</h3>
<div class="paragraph">
<p>After installation of the dependencies, we need to package the project and make it run. We input the following:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code>npm run dev</code></pre>
</div>
</div>
<div class="paragraph">
<p>This means run the project with the localhost. We can see the configuration information in webpack.config.js:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code>devServer: {
    host: '127.0.0.1',
    port: 8010,
    proxy: {
      '/api/': {
        target: 'http://127.0.0.1:8080',
        changeOrigin: true,
        pathRewrite: {
          '^/api': ''
        }
      }
    },</code></pre>
</div>
</div>
<div class="paragraph">
<p>As we see, the default port of localhost is 8010. If you want to change the port, just change it here.</p>
</div>
<div class="paragraph">
<p>After we input 'npm run dev', we wait for a while until it shows webpack: Compiled successfully. Then we open the browser and visit localhost:8010, if you see the page shown below, then congrats, you have successfully build a small website with VUE and ElementUI!</p>
</div>
<div class="imageblock">
<div class="content">
<img src="http://img.blog.csdn.net/20170526115502649?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjkwNzA0OQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="SouthEast">
</div>
</div>
<div class="paragraph">
<p>Click the 'Let&#8217;s do it' button, we can see a message floating on the top right. That is one of the components provided by ElementUI.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="http://img.blog.csdn.net/20170526115722874?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjkwNzA0OQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="SouthEast">
</div>
</div>
<div class="paragraph">
<p>As it shows, it&#8217;s time to bulid something epic!</p>
</div>
<div class="paragraph">
<p>In the next post I will introduce some details to write a navigation page and something about vue-router.</p>
</div>
</div>
</div>
</div>]]></description><link>https://tjfy1992.github.io/2017/06/03/Build-your-own-Vuejs-20-Website-with-ElementUI.html</link><guid isPermaLink="true">https://tjfy1992.github.io/2017/06/03/Build-your-own-Vuejs-20-Website-with-ElementUI.html</guid><pubDate>Sat, 03 Jun 2017 00:00:00 GMT</pubDate></item></channel></rss>